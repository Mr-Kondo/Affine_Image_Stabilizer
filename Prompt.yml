# Prompt used to generate affine_template_matching.py
system: |
  You are a senior computer-vision engineer and Python architect.
  Produce production-quality Python 3.11 code that runs on macOS (Apple Silicon)
  and Linux.  Use OpenCV ≥ 4.9, NumPy, pandas, tqdm, Pillow, and the standard
  library only.  Follow best practices (PEP 8, explicit resource release) and
  avoid memory leaks.  The deliverable must be a **single** self-contained file
  named `affine_template_matching.py`, fully commented and ready to run.

user: |
  ## ゴール
  動画をテンプレートマッチングで安定化（アフィン補正）するツールを実装せよ。
  GUI と CLI の両モードを持ち、GUI は完全にインタラクティブ。

  ## 機能要件
  1. MP4 と `Input.csv` を読み込む。  
     CSV 列:  
     - `No.` 連番  
     - `x座標`, `y座標` - テンプレート中心  
     - `テンプレートの大きさ（正方形）`  
     - `探索左`, `探索右`, `探索上`, `探索下` (中心からのピクセルマージン)
  2. 1 フレーム目からテンプレートを切り出し、以降の各フレームで
     `cv2.matchTemplate(T​M_CCORR_NORMED)` を矩形 ROI 内で実行。
     - ROI は上記４マージンで定義。  
     - ピークは 3×3 の二次近似でサブピクセル化。  
     - 各一致を `Matched.csv`
       (Frame_No, Template_No, x, y, mx, my) に追記。
  3. フレームごとに `cv2.estimateAffinePartial2D(RANSAC)` で
     2×3 アフィン行列を推定し、`cv2.warpAffine` でブレ補正。
  4. 補正後フレームを `Affined.mp4` に書き出し、一時フォルダを削除。

  ## GUI 要件 (Tkinter)
  * 既存 `Input.csv` があれば読み込み、
    テンプレート (赤) / ROI (青) を画像に描画しリストに反映。
  * **Entry ウィジェット**でテンプレートサイズと  
    `SearchLeft/Right/Top/Bottom` を自由入力可。
  * Canvas クリックでテンプレートを追加。  
    - ズーム倍率に無関係に元画像座標へ正規化して保存。  
    - 画像上に **No. 番号** を描画し、TreeView の先頭列にも表示。
  * TreeView で行をダブルクリックすると値をインライン編集。  
    Delete/Undo 対応。
  * スライダーで任意フレームをプレビュー。
  * `+ / -` ボタンで画像を拡大縮小。
    - マウス座標を常に元画像系でステータスバーに表示。
  * Execute でテンプレート数を検証(≥3) → `Input.csv` 保存 →
    バックグラウンド Thread でマッチ & 補正実行。  
    進捗は `queue.Queue` で受け取り `ttk.Progressbar` に反映。
    実行中は操作ボタンを disable。

  ## CLI モード
  `--nogui` で Tk を使わず既存 CSV を処理。

  ## 実装上の注意
  * Pillow ≥10 互換のため `Resampling.LANCZOS` フォールバックを実装。
  * OpenCV の `VideoWriter_fourcc` / `.fourcc` 両対応。
  * すべての重いオブジェクトを `release()` や `gc.collect()` で明示解放。
  * マルチスレッド中の UI フリーズを避けるため
    `after(…)` ポーリングで Queue を監視。

assistant_expectation: |
  * 出力はファイル全文と、主要クラス／関数の構成を説明する短い解説。
  * コードブロック１つにまとめ、実行コマンド例を先頭 docstring に記載。
  * 日本語コメントを適宜入れるが、変数名・API は英語。
